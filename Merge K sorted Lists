
class Solution {
public:
    ListNode *mergeTwoLists(ListNode* l1, ListNode* l2) {
        // if (NULL == l1) return l2;
        // else if (NULL == l2) return l1;
        // if (l1->val <= l2->val) {
        //     l1->next = mergeTwoLists(l1->next, l2);
        //     return l1;
        // }
        // else {
        //     l2->next = mergeTwoLists(l1, l2->next);
        //     return l2;
        // }
        
        
        //This is same concept like Merge sort
        
        if(!l1) return l2;
        if(!l2) return l1;
        ListNode* dummy = new ListNode(0);
        ListNode* head = dummy;
        while(l1 && l2){
            if(l1->val <= l2->val){
                head->next = l1;
                head = l1;
                l1 = l1->next;
            }
            else{
                head->next = l2;
                head = l2;
                l2 = l2->next;
            }
        }
        if(l1){
            head->next = l1;
        }
        if(l2){
            head->next = l2;
        }
        return dummy->next;
    }
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        if (lists.empty()) return NULL;
        int len = lists.size();
        while (len > 1) {
            for (int i = 0; i < len / 2; ++i) {
                lists[i] = mergeTwoLists(lists[i], lists[len - 1 - i]);
            }
            len = (len + 1) / 2;
        }
        
        return lists[0];
    }
};
