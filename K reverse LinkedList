Iterative :-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::reverseList(ListNode* A, int B) {
    ListNode* dummy = new ListNode(0);
    dummy->next = A;
    ListNode* head = dummy , *curr = A, *pre = NULL, *next , *first = A;
    int k = B;
    while(curr){
        first = curr , pre = NULL;
        while(k){
            next = curr->next;
            curr->next=  pre;
            pre = curr;
            curr = next;
            k--;
        }
        head->next = pre;
        first->next = curr;
        head = first;
        k = B;
    }
    return dummy->next;
}

recursive :-

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::reverseList(ListNode* A, int B) {
    ListNode* curr = A, *pre = NULL , *next = NULL;
    int cnt = 0;
    while(cnt < B && curr){
        next = curr->next;
        curr->next = pre;
        pre = curr;
        curr = next;
        cnt++;
    }
    if(next){
        A->next = reverseList(next, B);
    }
    return pre;
}

